[{"content":"React Fiber is an ongoing reimplementation of React\u0026rsquo;s core algorithm. It is the culmination of over two years of research by the React team.\nPrerequisites A few things to know before diving into React Fiber:\nReact Components, Elements, Instances Reconciliation React Basic Theoretical Concepts React design Principles Reconciliation Reconciliation is an algorithm that React uses to distinguish one DOM tree from another to determine which parts need to be changed.\nFor example, when you render your React application, a tree including nodes describing that application will be created and saved in memory. This tree is then reassembled to match the rendering environment (compare with old tree to calculate what operations are needed to update React app).\nReconciliation vs Rendering Reconciliation and Rendering are separate stages.\nReconciler does the work of calcutation what parts of tree are changed. Besides, Renderer uses that infomation to update rendered application.\nScheduling Scheduling is a process of determine when a job is executed. Important points are:\nIn a user interface, it is necessary to update everything at once. In fact, doing so can be very wasteful, causing frame drops (FPS) There are two approaches: one will need the application or yourself - the programmer decides the schedule of work or one way will let the framework here be React to decide for you. React is currently not using scheduling properly. Re-rendering seems to be done immediately upon changes. Leveraging the benefits of planning was a key idea for moving forward with Fiber.\nReact Fiber Fiber primary goal is to enable React to take advantage of Scheduling\nSpecifically we need:\nStop the work and return to execulation after Set priority for different works Reuse completed works Ignore works that are no longer needed To do this, we first need a way to break down a task into smaller units. In a sense, a Fiber represents a unit of work. Going back to the idea in \u0026ldquo;React Components as functions of data\u0026rdquo;, usually expressed as v = f(d).\nRendering a React app like a fucntion call that contains calls to other functions and so on. The way that typical computers trace an execution of a program is using the Call Stack. When a function is executed, a Stack Frame is added to the queue, that Stack Frame represents the work executed by that function.\nWhen working with user interfaces, a problem here is that there are many works executed at once, it might cause Animation to drop FPS and look terible. Addition, some works might become unnecessary if they are replaced by more recent updates. This is where the comparision of UI elements and functions is break down because normally components have more specific relationships than functions.\nNewer browsers install APIs to help indicate the problem. requestIdleCallback schedules a low priority function to be called during idle and requestAnimationFrame schedules high priority functions that can be called in next frame. The point is that you need to breakdown render tasks to small units to use those APIs. If you just depend on Call Stack, it will work until stack is empty. It would be better if we can modify behavior of Call Stack to optimize UI rendering? It would be better if we\u0026rsquo;re able to interrupt Call Stack as we like and control Stack Frame manually. That is the goal of React Fiber.\nBesides scheduling, handling Stack Frames manually opens up the potential for features like Concurrency and Error Boundaries.\n","permalink":"https://caotrongtin99.github.io/posts/react-fiber/","summary":"React Fiber is an ongoing reimplementation of React\u0026rsquo;s core algorithm. It is the culmination of over two years of research by the React team.\nPrerequisites A few things to know before diving into React Fiber:\nReact Components, Elements, Instances Reconciliation React Basic Theoretical Concepts React design Principles Reconciliation Reconciliation is an algorithm that React uses to distinguish one DOM tree from another to determine which parts need to be changed.","title":"React Fiber"},{"content":"Hi there, i see that many developers are facing with problems about Date in javascript recently. Today, I gonna to show you how to use Date in js correctly.\nTimezones There are 2 definitions about timezones in js: UTC and Local time zones Local time refers to the timezone your computer is in.\nUTC is synonymous with Greenwich Mean Time (GMT) in practice.\nISO 8061 format What is it? It\u0026rsquo;s an international standard introduced by ISO in 1988. Acctually, it describes the way to write date, time easily that our computers can understand it.\nDate constructions Syntax\nnew Date() new Date(value) new Date(dateString) new Date(dateObject) new Date(year, monthIndex) new Date(year, monthIndex, day) new Date(year, monthIndex, day, hours) new Date(year, monthIndex, day, hours, minutes) new Date(year, monthIndex, day, hours, minutes, seconds) new Date(year, monthIndex, day, hours, minutes, seconds, milliseconds) ","permalink":"https://caotrongtin99.github.io/posts/date-js/","summary":"Hi there, i see that many developers are facing with problems about Date in javascript recently. Today, I gonna to show you how to use Date in js correctly.\nTimezones There are 2 definitions about timezones in js: UTC and Local time zones Local time refers to the timezone your computer is in.\nUTC is synonymous with Greenwich Mean Time (GMT) in practice.\nISO 8061 format What is it? It\u0026rsquo;s an international standard introduced by ISO in 1988.","title":"Understanding Date in Javascript"},{"content":"Let\u0026rsquo;s explore what pure function is ðŸ‘‡\nFunctions? Function is a execution of a task. It receives input and return value.\nPure Functions What is a pure function?\nA function always return same output if it passed constant parameters. It doesn\u0026rsquo;t depends on any state or data, it just depends on its input parameters. This function does not have any effect on other objects, such as requests, input, output or data mutations. Side Effects Side Effects are interactions to outside the function. That can be anything from changing a variable that exists outside of a function, to calling another function from within a function. Common side effects:\nHTPP Request Print data to console Interact DOM Math.ramdom() Get current date time \u0026hellip; Example An example about a function calculating product price\nfunction priceAfterTax(productPrice) { return (productPrice * 0.1) + productPrice; } This function isn\u0026rsquo;t dependent on external variables and doesn\u0026rsquo;t produces side effects so it\u0026rsquo;s a pure function.\nAnother example\nvar tax = 10; function calculateTax(productPrice) { return (productPrice * (tax/100)) + productPrice; } This function is dependent on an external variable so it isn\u0026rsquo;t a pure function.\nWhy is it important? Pure function is used a lot in functional programming. It is useful for testing and refactoring. Because it always returns same outputs with same inputs, testing becomes easier. Besides, it doesn\u0026rsquo;t affects external environment so refactoring becomes more convinient. In conclusion, pure functions will help improve the quality of code, make clean code, and be easy to maintainance.\n","permalink":"https://caotrongtin99.github.io/posts/pure-function-js/","summary":"Let\u0026rsquo;s explore what pure function is ðŸ‘‡\nFunctions? Function is a execution of a task. It receives input and return value.\nPure Functions What is a pure function?\nA function always return same output if it passed constant parameters. It doesn\u0026rsquo;t depends on any state or data, it just depends on its input parameters. This function does not have any effect on other objects, such as requests, input, output or data mutations.","title":"Pure Function in Javascript"},{"content":"My name is Tin Cao I\u0026rsquo;m a self-proclaimed software craftsman with a 5-year experience in Node.js.\nI\u0026rsquo;m currently building decentralized discourse, as a Software Engineer, at Capsule Social, while exploring the potential of the Decentralized Web.\nI\u0026rsquo;m currently finishing my CS studies at the School of Electrical \u0026amp; Computer Engineering of the National Technical University of Athens.\nIn my free time, I play greek rembetiko music on the guitar and administrate the rembetiko.gr community.\nFrom time to time you can read some of my thoughts, projects and ideas that I share on my blog.\nNotable projects I use, like and support: Discourse (github/website) Mailcow (github/website) Signal (github/website) IPFS (github/website) type-graphql (github/website) ","permalink":"https://caotrongtin99.github.io/about/","summary":"About","title":""}]