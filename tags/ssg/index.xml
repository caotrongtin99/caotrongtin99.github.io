<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>SSG on Cao Trong Tin</title>
    <link>https://caotrongtin99.github.io/tags/ssg/</link>
    <description>Recent content in SSG on Cao Trong Tin</description>
    <image>
      <url>https://caotrongtin99.github.io/profile.webp</url>
      <link>https://caotrongtin99.github.io/profile.webp</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Jul 2022 22:42:17 +0700</lastBuildDate><atom:link href="https://caotrongtin99.github.io/tags/ssg/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Server Side Rendering &amp; Static Site Generation</title>
      <link>https://caotrongtin99.github.io/posts/ssr-ssg/</link>
      <pubDate>Thu, 07 Jul 2022 22:42:17 +0700</pubDate>
      
      <guid>https://caotrongtin99.github.io/posts/ssr-ssg/</guid>
      <description>There are two types of pre-rendering in Next.js. So what are they and which is the best approach?
Table of Contents Rendering on Server Pre-rendering Server Side Rendering Static Site Generation Use cases Wrap Up Rendering on Server ✍️ Explain:
When users request to server, server will sent a generated HTML file. After that, ReactDOM.hydrate() will run to hydrate (attach event listeners) the HTML rendered from the server. After hydration process, the website becomes interactive.</description>
    </item>
    
  </channel>
</rss>
